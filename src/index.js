import OpenAI from "openai";
import chalk from "chalk";
import { config as dotEnvConfig } from "dotenv";
import { getFileId, getVectorStoreId } from "./file_manager.js";
import {
  getAssistantId,
  updateAssistantWithVectorStore,
} from "./assistant_manager.js";
import {
  getThreadId,
  addMessageToThread,
  getLastResponse,
} from "./thread_manager.js";
import { runAssistantOnThread, getRunStatus } from "./run_manager.js";
import TelegramBot from "node-telegram-bot-api";

dotEnvConfig({ path: ".env" });
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

const bot = new TelegramBot(process.env.TELEGRAM_BOT_KEY, {
  polling: {
    interval: 300,
    autoStart: true,
  },
});

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const message = msg.text;
  if (message === "/start") {
    bot.sendMessage(chatId, "–ü—Ä–∏–≤—ñ—Ç! –ë—É–¥—å-–ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–æ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞:");
  } else {
    bot.sendMessage(chatId, "–í–∞—à –∑–∞–ø–∏—Ç –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è ...");
    main(chatId, message);
  }
});

async function main(telegramBotChatID, telegramBotMessage) {
  let runStatus;

  try {
    // 1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID —Ñ–∞–π–ª—É
    const fileId = await getFileId(openai, process.env.FILE_NAME);

    console.log(`‚úîÔ∏è Id —Ñ–∞–π–ª—É: ${chalk.grey.bold(fileId)}`);

    // 2. –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞
    const assistantId = await getAssistantId(
      openai,
      process.env.ASSISTANT_NAME
    );

    console.log(`‚úîÔ∏è Id –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞: ${chalk.grey.bold(assistantId)}`);

    // 3. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª–∏ —É –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞. (–û—Ç—Ä–∏–º—É—î–º–æ –≤–µ–∫—Ç–æ—Ä–Ω–µ —Å—Ö–æ–≤–∏—â–µ)
    const vectorStoreId = await getVectorStoreId(openai, [fileId]);

    console.log(`‚úîÔ∏è Id –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞: ${chalk.grey.bold(vectorStoreId)}`);

    await updateAssistantWithVectorStore(openai, assistantId, vectorStoreId);

    // 4. –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID —Ç—Ä–µ–¥—É
    const threadId = await getThreadId(openai);

    console.log(`‚úîÔ∏è Id —Ç—Ä–µ–¥—É: ${chalk.grey.bold(threadId)}`);

    // –õ–æ–≥—ñ–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —ñ –æ—Ç—Ä–∏–º—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    // while (true) {
    const message = telegramBotMessage;

    // 5. –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ç—Ä–µ–¥
    await addMessageToThread(openai, threadId, message);

    //// –Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ñ–∞–π–ª –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü–µ–π –∫–æ–¥
    // await addMessageToThread(openai, threadId, message, fileId);

    // 6. –ó–∞–ø—É—Å–∫ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞
    const runObject = await runAssistantOnThread(openai, threadId, assistantId);

    // 7. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    while (true) {
      // –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫—É –∫–æ–∂–Ω—ñ 2 —Å–µ–∫—É–Ω–¥–∏
      await new Promise((resolve) => setTimeout(resolve, 2000));
      runStatus = await getRunStatus(openai, threadId, runObject.id);
      if (runStatus.status === "completed" || runStatus.status === "failed") {
        break;
      }
    }

    // 8. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    const lastMessage = await getLastResponse(openai, threadId);
    console.log(`\nüí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞: \n ${chalk.cyan.bold(lastMessage)}
      `);

    bot.sendMessage(telegramBotChatID, lastMessage);
    // }
  } catch (error) {
    console.error(chalk.red("–ü–æ–º–∏–ª–∫–∞: "), error);
  }
  return;
}

/**
 * @example "–Ø–∫—ñ –ø—Ä–µ–¥–º–µ—Ç–∏ —É —Å–µ—Ä–µ–¥—É –¥–ª—è –≥—Ä—É–ø–∏ ...?";
 * @returns {Promise<string>} The user message.
 */
async function askUserMessage() {
  return new Promise((resolve, reject) => {
    process.stdout.write(
      chalk.green.bold("\n –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞: ")
    );
    process.stdin.setEncoding("utf-8");
    process.stdin.on("data", (data) => {
      resolve(data.trim());
    });
  });
}

// main();
